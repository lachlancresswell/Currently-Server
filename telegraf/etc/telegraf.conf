# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "3s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 10000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "3s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "1s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "5s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb_v2]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://${INFLUX_ADDRESS}"] # required
  token = '${INFLUX_TOKEN}'
  # The target database for metrics (telegraf will create it if not exists)
  organization = '${INFLUX_ORG}'
  bucket = '${INFLUX_BUCKET}'
  # Precision of writes, valid values are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512

  insecure_skip_verify = true


###############################################################################
#                                  INPUTS                                     #
###############################################################################

[[inputs.modbus]]
  ## Connection Configuration
  ##
  ## The plugin supports connections to PLCs via MODBUS/TCP or
  ## via serial line communication in binary (RTU) or readable (ASCII) encoding
  ##
  ## Device name
  name = "Device"

  ## Slave ID - addresses a MODBUS device on the bus
  ## Range: 0 - 255 [0 = broadcast; 248 - 255 = reserved]
  slave_id = 1

  ## Timeout for each request
  timeout = "3s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
  # busy_retries = 0
  # busy_retries_wait = "100ms"

  # TCP - connect via Modbus/TCP
  controller = "tcp://${MODBUS_GATEWAY_IP}:502"

  ## Serial (RS485; RS232)
  # controller = "file:///dev/ttyUSB0"
  # baud_rate = 9600
  # data_bits = 8
  # parity = "N"
  # stop_bits = 1
  # transmission_mode = "RTU"


  ## Measurements
  ##

  ## Digital Variables, Discrete Inputs and Coils
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## address     - variable address

  #discrete_inputs = [
  #  { name = "start",          address = [0]},
  #  { name = "stop",           address = [1]},
  #  { name = "reset",          address = [2]},
  #  { name = "emergency_stop", address = [3]},
  #]
  #coils = [
  #  { name = "motor1_run",     address = [0]},
  #  { name = "motor1_jog",     address = [1]},
  #  { name = "motor1_stop",    address = [2]},
  #]

  ## Analog Variables, Input Registers and Holding Registers
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## byte_order  - the ordering of bytes
  ##  |---AB, ABCD   - Big Endian
  ##  |---BA, DCBA   - Little Endian
  ##  |---BADC       - Mid-Big Endian
  ##  |---CDAB       - Mid-Little Endian
  ## data_type  - INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT32-IEEE, FLOAT64-IEEE (the IEEE 754 binary representation)
  ##              FLOAT32 (deprecated), FIXED, UFIXED (fixed-point representation on input)
  ## scale      - the final numeric variable representation
  ## address    - variable address

  holding_registers = [
    { name = "Voltage",              byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20480,20481]},
    { name = "${L1_NAME} Voltage",           byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20482,20483]},
    { name = "${L2_NAME} Voltage",           byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20484,20485]},
    { name = "${L3_NAME} Voltage",           byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20486,20487]},

    { name = "Grid Frequency",       byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20488,20489]},

    { name = "Current",              byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20490,20491]},
    { name = "L1 Current",           byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20492,20493]},
    { name = "L2 Current",           byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20494,20495]},
    { name = "L3 Current",           byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20496,20497]},

    { name = "Total Active Power",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20498,20499]},
    { name = "L1 Active Power",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20500,20501]},
    { name = "L2 Active Power",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20502,20503]},
    { name = "L3 Active Power",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20504,20505]},

    { name = "Total Reactive Power", byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20506,20507]},
    { name = "L1 Reactive Power",    byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20508,20509]},
    { name = "L2 Reactive Power",    byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20510,20511]},
    { name = "L3 Reactive Power",    byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20512,20513]},

    { name = "Total Apparent Power", byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20514,20515]},
    { name = "L1 Apparent Power",    byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20516,20517]},
    { name = "L2 Apparent Power",    byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20518,20519]},
    { name = "L3 Apparent Power",    byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20520,20521]},

    { name = "Power Factor",         byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20522,20523]},
    { name = "L1 Power Factor",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20524,20525]},
    { name = "L2 Power Factor",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20526,20527]},
    { name = "L3 Power Factor",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [20528,20529]},

    { name = "Total active energy",        byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24576,24577]},
    { name = "T1 Total active energy",     byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24578,24579]},
    { name = "T2 Total active energy",     byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24580,24581]},
    { name = "L1 Total active energy",     byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24582,24583]},
    { name = "L2 Total active energy",     byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24584,24585]},
    { name = "L3 Total active energy",     byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24586,24587]},
 
    { name = "Forward active energy",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24588,24589]},
    { name = "T1 Forward active energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24590,24591]},
    { name = "T2 Forward active energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24592,24593]},
    { name = "L1 Forward active energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24594,24595]},
    { name = "L2 Forward active energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24596,24597]},
    { name = "L3 Forward active energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24598,24599]},

    { name = "Reverse active energy",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24600,24601]},
    { name = "T1 Reverse active energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24602,24603]},
    { name = "T2 Reverse active energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24604,24605]},
    { name = "L1 Reverse active energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24606,24607]},
    { name = "L2 Reverse active energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24608,24609]},
    { name = "L3 Reverse active energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24610,24611]},

    { name = "Total reactive energy",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24612,24613]},
    { name = "T1 Total reactive energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24614,24615]},
    { name = "T2 Total reactive energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24616,24617]},
    { name = "L1 Total reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24618,24619]},
    { name = "L2 Total reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24620,24621]},
    { name = "L3 Total reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24622,24623]},

    { name = "Forward reactive energy",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24624,24625]},
    { name = "T1 Forward reactive energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24626,24627]},
    { name = "T2 Forward reactive energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24628,24629]},
    { name = "L1 Forward reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24630,24631]},
    { name = "L2 Forward reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24632,24633]},
    { name = "L3 Forward reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24634,24635]},

    { name = "Reverse reactive energy",      byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24636,24637]},
    { name = "T1 Reverse reactive energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24638,24639]},
    { name = "T2 Reverse reactive energy",   byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24640,24641]},
    { name = "L1 Reverse reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24642,24643]},
    { name = "L2 Reverse reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24644,24645]},
    { name = "L3 Reverse reactive energy",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24646,24647]},

    { name = "Tariff",  byte_order = "AB",  data_type = "INT16", scale=1.0,   address = [24648]},
    { name = "Day Counter",  byte_order = "ABCD",  data_type = "FLOAT32-IEEE", scale=1.0,   address = [24649,24650]},
  ]


# Generate metrics for test and demonstration purposes
[[inputs.mock]]
  ## Set the metric name to use for reporting
  metric_name = "mock"

  interval = '1s'

  ## Optional string key-value pairs of tags to add to all metrics
  # [inputs.mock.tags]
  # "key" = "value"

  [[inputs.mock.random]]
    name = "L1 Voltage"
    min = 230.0
    max = 235.0
  [[inputs.mock.random]]
    name = "L1 Current"
    min = 1.0
    max = 6.0
  [[inputs.mock.random]]
    name = "L2 Voltage"
    min = 230.0
    max = 235.0
  [[inputs.mock.random]]
    name = "L2 Current"
    min = 1.0
    max = 6.0
  [[inputs.mock.random]]
    name = "L3 Voltage"
    min = 230.0
    max = 235.0
  [[inputs.mock.random]]
    name = "L3 Current"
    min = 1.0
    max = 6.0
  [[inputs.mock.random]]
    name = "Grid Frequency"
    min = 49.8
    max = 50.2

  [[inputs.mock.random]]
    name = "Total Active Energy"
    min = 0.0
    max = 5.2